#!/usr/bin/ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2018, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

t0 = Time.now
require_relative 'lib/lxd_driver'

LXDriver.log_init

xml_path = ARGV[0] # Deployment path
xml_file = STDIN.read

# Map one xml into LXD config
xml = OpenNebula::XMLElement.new
xml.initialize_xml(xml_file, 'VM')
# TODO: deal with missing parameters
info = LXDriver::Info.new(xml)

# Create container object
client = LXDClient.new
container = Container.new(info, client)

# Validate possible existing container
if Container.exist?(container.name, client)
    OpenNebula.log_info('Overriding container')
    container = Container.get(container.name, client)
    raise LXDError, 'A container with the same ID is already running' if container.status == 'Running'

    container.config.update(info['config'])
    container.devices.update(info['devices'])
    container.update
else
    container.create
end

LXDriver.save_deployment(xml_file, xml_path, container)

# Setup required mounts
# TODO: mappers data parsing from xml
# TODO: mapper for rootfs
# TODO: mapper for datablocks

mapping = system("#{__dir__}/mapper/qcow2.rb map #{LXDriver::CONTAINERS + container.name} /home/dann1/one-0.qcow2")
raise StandardError, 'mapping failed' unless mapping

# Start container
LXDriver.start_container(container)

# VNC
# TODO: VNC server

LXDriver.log_end(t0)
